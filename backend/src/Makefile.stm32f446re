# Makefile for STM32F446RE with neural network inference

# Target settings
TARGET = stm32f446re_nn_inference
MCU = cortex-m4

# Toolchain
CC = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
OBJCOPY = arm-none-eabi-objcopy
SIZE = arm-none-eabi-size

# STM32F446RE specific settings
CPU = -mcpu=$(MCU)
FPU = -mfpu=fpv4-sp-d16
FLOAT-ABI = -mfloat-abi=hard

# Compiler flags
CFLAGS = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)
CFLAGS += -DSTM32F446xx -DUSE_HAL_DRIVER
CFLAGS += -Wall -Wextra -O3 -g3
CFLAGS += -ffunction-sections -fdata-sections
CFLAGS += -MMD -MP

# Linker flags
LDFLAGS = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)
LDFLAGS += -specs=nano.specs -specs=nosys.specs
LDFLAGS += -Wl,--gc-sections -static -Wl,--start-group -lc -lm -Wl,--end-group

# Source files
SRCS = main.c output/model.c
OBJS = $(SRCS:.c=.o)

# Build rules
all: $(TARGET).elf $(TARGET).hex $(TARGET).bin
	$(SIZE) $(TARGET).elf

$(TARGET).elf: $(OBJS)
	$(CC) $(OBJS) $(LDFLAGS) -o $@

$(TARGET).hex: $(TARGET).elf
	$(OBJCOPY) -O ihex $< $@

$(TARGET).bin: $(TARGET).elf
	$(OBJCOPY) -O binary -S $< $@

%.o: %.c
	$(CC) -c $(CFLAGS) $< -o $@

clean:
	rm -f $(OBJS) $(TARGET).elf $(TARGET).hex $(TARGET).bin

flash: $(TARGET).bin
	st-flash write $(TARGET).bin 0x8000000

.PHONY: all clean flash
